// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("a.s", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-apple-macosx10.8.0");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 FuncTy_0_args.push_back(PointerTy_1);
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_1, 0);
 
 std::vector<Type*>FuncTy_3_args;
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_4 = PointerType::get(PointerTy_5, 0);
 
 FuncTy_3_args.push_back(PointerTy_4);
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(PointerTy_4, 0);
 
 
 // Function Declarations
 
 Function* func_f = mod->getFunction("f");
 if (!func_f) {
 func_f = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"f", mod); 
 func_f->setCallingConv(CallingConv::C);
 }
 AttributeSet func_f_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_f_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_f->setAttributes(func_f_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_7 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: f (func_f)
 {
  Function::arg_iterator args = func_f->arg_begin();
  Value* ptr_p = args++;
  ptr_p->setName("p");
  
  BasicBlock* label_9 = BasicBlock::Create(mod->getContext(), "",func_f,0);
  
  // Block  (label_9)
  AllocaInst* ptr_10 = new AllocaInst(PointerTy_1, "", label_9);
  ptr_10->setAlignment(8);
  AllocaInst* ptr_i = new AllocaInst(PointerTy_1, "i", label_9);
  ptr_i->setAlignment(8);
  StoreInst* void_11 = new StoreInst(ptr_p, ptr_10, false, label_9);
  void_11->setAlignment(8);
  LoadInst* ptr_12 = new LoadInst(ptr_10, "", false, label_9);
  ptr_12->setAlignment(8);
  StoreInst* void_13 = new StoreInst(ptr_12, ptr_i, false, label_9);
  void_13->setAlignment(8);
  LoadInst* ptr_14 = new LoadInst(ptr_i, "", false, label_9);
  ptr_14->setAlignment(8);
  LoadInst* int32_15 = new LoadInst(ptr_14, "", false, label_9);
  int32_15->setAlignment(4);
  BinaryOperator* int32_16 = BinaryOperator::Create(Instruction::Add, int32_15, const_int32_7, "", label_9);
  ReturnInst::Create(mod->getContext(), int32_16, label_9);
  
 }
 
 // Function: main (func_main)
 {
  Function::arg_iterator args = func_main->arg_begin();
  Value* int32_argc = args++;
  int32_argc->setName("argc");
  Value* ptr_argv = args++;
  ptr_argv->setName("argv");
  
  BasicBlock* label_18 = BasicBlock::Create(mod->getContext(), "",func_main,0);
  
  // Block  (label_18)
  AllocaInst* ptr_19 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_18);
  ptr_19->setAlignment(4);
  AllocaInst* ptr_20 = new AllocaInst(PointerTy_4, "", label_18);
  ptr_20->setAlignment(8);
  StoreInst* void_21 = new StoreInst(int32_argc, ptr_19, false, label_18);
  void_21->setAlignment(4);
  StoreInst* void_22 = new StoreInst(ptr_argv, ptr_20, false, label_18);
  void_22->setAlignment(8);
  ReturnInst::Create(mod->getContext(), const_int32_8, label_18);
  
 }
 
 return mod;
}
